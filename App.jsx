import { useState, useEffect } from 'react'
import { Button } from '@/components/ui/button.jsx'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card.jsx'
import { Input } from '@/components/ui/input.jsx'
import { Label } from '@/components/ui/label.jsx'
import { Textarea } from '@/components/ui/textarea.jsx'
import { Badge } from '@/components/ui/badge.jsx'
import { Calendar, Star, Trophy, Target, Plus, Trash2 } from 'lucide-react'
import './App.css'

function App() {
  const [childName, setChildName] = useState('')
  const [weekPeriod, setWeekPeriod] = useState('')
  const [theme, setTheme] = useState('')
  const [habits, setHabits] = useState([
    { id: 1, name: 'ÏïÑÏπ® (6-9Ïãú) Ïä§Ïä§Î°ú ÏùºÏñ¥ÎÇòÍ∏∞', times: Array(7).fill('') },
    { id: 2, name: 'Ïò§Ï†Ñ (9-12Ïãú) ÏßëÏ§ëÌï¥ÏÑú Í≥µÎ∂Ä/ÎÜÄÏù¥', times: Array(7).fill('') },
    { id: 3, name: 'Ï†êÏã¨ (12-1Ïãú) Ìé∏Ïãù ÏóÜÏù¥ Í≥®Í≥†Î£® Î®πÍ∏∞', times: Array(7).fill('') },
    { id: 4, name: 'Ïò§ÌõÑ (1-5Ïãú) Ïä§Ïä§Î°ú Í≥ÑÌöçÌïú Ïùº ÌïòÍ∏∞', times: Array(7).fill('') },
    { id: 5, name: 'Ï†ÄÎÖÅ (6-9Ïãú) Ï†ïÎ¶¨ Ï†ïÎèà Î∞è ÎÇ¥Ïùº Ï§ÄÎπÑ', times: Array(7).fill('') }
  ])
  const [reflection, setReflection] = useState({
    bestDay: '',
    easiestHabit: '',
    nextWeekGoal: ''
  })
  const [reward, setReward] = useState('')

  const days = ['ÏõîÏöîÏùº', 'ÌôîÏöîÏùº', 'ÏàòÏöîÏùº', 'Î™©ÏöîÏùº', 'Í∏àÏöîÏùº', 'ÌÜ†ÏöîÏùº', 'ÏùºÏöîÏùº']
  const colors = [
    { name: 'ÎÖπÏÉâ', value: 'green', emoji: 'üòä', description: 'Î™©Ìëú Îã¨ÏÑ±!' },
    { name: 'ÎÖ∏Îûë', value: 'yellow', emoji: 'ü§î', description: 'Ï°∞Í∏à ÏïÑÏâΩÏßÄÎßå ÏûòÌñàÏñ¥!' },
    { name: 'Îπ®Í∞ï', value: 'red', emoji: 'üòî', description: 'Í¥úÏ∞ÆÏïÑ, ÎÇ¥Ïùº Îã§Ïãú Ìï¥Î≥¥Ïûê!' }
  ]

  // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const savedData = localStorage.getItem('habitTracker')
    if (savedData) {
      const data = JSON.parse(savedData)
      setChildName(data.childName || '')
      setWeekPeriod(data.weekPeriod || '')
      setTheme(data.theme || '')
      setHabits(data.habits || habits)
      setReflection(data.reflection || reflection)
      setReward(data.reward || '')
    }
  }, [])

  // Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
  const saveData = () => {
    const data = {
      childName,
      weekPeriod,
      theme,
      habits,
      reflection,
      reward
    }
    localStorage.setItem('habitTracker', JSON.stringify(data))
  }

  useEffect(() => {
    saveData()
  }, [childName, weekPeriod, theme, habits, reflection, reward])

  const updateHabitColor = (habitId, dayIndex, color) => {
    setHabits(prev => prev.map(habit => 
      habit.id === habitId 
        ? { ...habit, times: habit.times.map((time, index) => 
            index === dayIndex ? color : time
          )}
        : habit
    ))
  }

  const addHabit = () => {
    const newHabit = {
      id: Date.now(),
      name: 'ÏÉàÎ°úÏö¥ ÏäµÍ¥ÄÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî',
      times: Array(7).fill('')
    }
    setHabits(prev => [...prev, newHabit])
  }

  const removeHabit = (habitId) => {
    setHabits(prev => prev.filter(habit => habit.id !== habitId))
  }

  const updateHabitName = (habitId, newName) => {
    setHabits(prev => prev.map(habit => 
      habit.id === habitId ? { ...habit, name: newName } : habit
    ))
  }

  const getColorClass = (color) => {
    switch(color) {
      case 'green': return 'bg-green-500 hover:bg-green-600'
      case 'yellow': return 'bg-yellow-500 hover:bg-yellow-600'
      case 'red': return 'bg-red-500 hover:bg-red-600'
      default: return 'bg-gray-200 hover:bg-gray-300'
    }
  }

  const getWeeklyScore = (habit) => {
    return habit.times.filter(time => time === 'green').length
  }

  const getTotalScore = () => {
    return habits.reduce((total, habit) => total + getWeeklyScore(habit), 0)
  }

  const getMaxScore = () => {
    return habits.length * 7
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-4">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* Ìó§Îçî */}
        <Card className="bg-white/80 backdrop-blur-sm shadow-lg">
          <CardHeader className="text-center">
            <CardTitle className="text-3xl font-bold text-purple-800 flex items-center justify-center gap-2">
              <Star className="text-yellow-500" />
              Ï£ºÍ∞Ñ ÏäµÍ¥Ä ÏÑ±Ïû• Ï±åÎ¶∞ÏßÄ
              <Star className="text-yellow-500" />
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <Label htmlFor="childName">ÏïÑÏù¥ Ïù¥Î¶Ñ</Label>
                <Input
                  id="childName"
                  value={childName}
                  onChange={(e) => setChildName(e.target.value)}
                  placeholder="Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
                />
              </div>
              <div>
                <Label htmlFor="weekPeriod">Ï£ºÍ∞Ñ Í∏∞Í∞Ñ</Label>
                <Input
                  id="weekPeriod"
                  value={weekPeriod}
                  onChange={(e) => setWeekPeriod(e.target.value)}
                  placeholder="2024ÎÖÑ 1Ïõî 1Ïùº ~ 7Ïùº"
                />
              </div>
              <div>
                <Label htmlFor="theme">Ïù¥Î≤à Ï£º ÌÖåÎßà</Label>
                <Input
                  id="theme"
                  value={theme}
                  onChange={(e) => setTheme(e.target.value)}
                  placeholder="ÏãúÍ∞ÑÎåÄÎ≥Ñ ÏÉâÏÉÅ Ï±åÎ¶∞ÏßÄ!"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* ÏÉâÏÉÅ ÏΩîÎìú */}
        <Card className="bg-white/80 backdrop-blur-sm shadow-lg">
          <CardHeader>
            <CardTitle className="text-xl font-bold text-purple-800 flex items-center gap-2">
              üé® ÏÉâÏÉÅ ÏΩîÎìú
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {colors.map((color) => (
                <div key={color.value} className="flex items-center gap-3 p-3 rounded-lg bg-gray-50">
                  <div className={`w-6 h-6 rounded-full ${getColorClass(color.value)}`}></div>
                  <span className="text-2xl">{color.emoji}</span>
                  <div>
                    <div className="font-semibold">{color.name}</div>
                    <div className="text-sm text-gray-600">{color.description}</div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* ÏäµÍ¥Ä Ï∂îÏ†Å ÌÖåÏù¥Î∏î */}
        <Card className="bg-white/80 backdrop-blur-sm shadow-lg">
          <CardHeader className="flex flex-row items-center justify-between">
            <CardTitle className="text-xl font-bold text-purple-800 flex items-center gap-2">
              <Target />
              ÏäµÍ¥Ä Ï∂îÏ†ÅÌëú
            </CardTitle>
            <div className="flex items-center gap-4">
              <Badge variant="outline" className="text-lg px-3 py-1">
                Ï¥ùÏ†ê: {getTotalScore()} / {getMaxScore()}
              </Badge>
              <Button onClick={addHabit} size="sm" className="bg-purple-600 hover:bg-purple-700">
                <Plus className="w-4 h-4 mr-1" />
                ÏäµÍ¥Ä Ï∂îÍ∞Ä
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="overflow-x-auto">
              <table className="w-full border-collapse">
                <thead>
                  <tr>
                    <th className="border p-3 bg-purple-100 text-left min-w-[250px]">ÏãúÍ∞ÑÎåÄ / ÏäµÍ¥Ä</th>
                    {days.map((day) => (
                      <th key={day} className="border p-3 bg-purple-100 text-center min-w-[100px]">{day}</th>
                    ))}
                    <th className="border p-3 bg-purple-100 text-center">Ï£ºÍ∞Ñ Ìï©Í≥Ñ</th>
                    <th className="border p-3 bg-purple-100 text-center">ÏÇ≠Ï†ú</th>
                  </tr>
                </thead>
                <tbody>
                  {habits.map((habit) => (
                    <tr key={habit.id}>
                      <td className="border p-2">
                        <Input
                          value={habit.name}
                          onChange={(e) => updateHabitName(habit.id, e.target.value)}
                          className="border-none bg-transparent font-medium"
                        />
                      </td>
                      {habit.times.map((time, dayIndex) => (
                        <td key={dayIndex} className="border p-2 text-center">
                          <div className="flex gap-1 justify-center">
                            {colors.map((color) => (
                              <button
                                key={color.value}
                                onClick={() => updateHabitColor(habit.id, dayIndex, color.value)}
                                className={`w-8 h-8 rounded-full border-2 transition-all ${
                                  time === color.value 
                                    ? `${getColorClass(color.value)} border-gray-800 scale-110` 
                                    : `${getColorClass(color.value)} border-gray-300 opacity-50 hover:opacity-100`
                                }`}
                                title={color.description}
                              />
                            ))}
                          </div>
                        </td>
                      ))}
                      <td className="border p-3 text-center font-bold text-lg">
                        <Badge variant={getWeeklyScore(habit) >= 5 ? "default" : "secondary"}>
                          {getWeeklyScore(habit)} / 7
                        </Badge>
                      </td>
                      <td className="border p-3 text-center">
                        <Button
                          onClick={() => removeHabit(habit.id)}
                          size="sm"
                          variant="destructive"
                          disabled={habits.length <= 1}
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </CardContent>
        </Card>

        {/* ÎèåÏïÑÎ≥¥Í∏∞ ÏÑπÏÖò */}
        <Card className="bg-white/80 backdrop-blur-sm shadow-lg">
          <CardHeader>
            <CardTitle className="text-xl font-bold text-purple-800 flex items-center gap-2">
              üìà Ïù¥Î≤à Ï£º ÎèåÏïÑÎ≥¥Í∏∞
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="bestDay">Í∞ÄÏû• Ï¥àÎ°ùÏÉâÏù¥ ÎßéÏïòÎçò ÏöîÏùºÍ≥º ÏãúÍ∞ÑÏùÄ Ïñ∏Ï†úÏòÄÎÇòÏöî?</Label>
              <Textarea
                id="bestDay"
                value={reflection.bestDay}
                onChange={(e) => setReflection(prev => ({ ...prev, bestDay: e.target.value }))}
                placeholder="Ïòà: ÌôîÏöîÏùº ÏïÑÏπ® ÏãúÍ∞ÑÎåÄÍ∞Ä Í∞ÄÏû• Ï¢ãÏïòÏñ¥Ïöî!"
              />
            </div>
            <div>
              <Label htmlFor="easiestHabit">Ïñ¥Îñ§ ÏäµÍ¥ÄÏù¥ Í∞ÄÏû• Ïâ¨Ïõ†Í≥†, Ïñ¥Îñ§ ÏäµÍ¥ÄÏù¥ Í∞ÄÏû• Ïñ¥Î†§Ïõ†ÎÇòÏöî?</Label>
              <Textarea
                id="easiestHabit"
                value={reflection.easiestHabit}
                onChange={(e) => setReflection(prev => ({ ...prev, easiestHabit: e.target.value }))}
                placeholder="Ïòà: ÏïÑÏπ®Ïóê ÏùºÏñ¥ÎÇòÍ∏∞Îäî Ïâ¨Ïõ†ÏßÄÎßå, Ï†ïÎ¶¨Ï†ïÎèàÏùÄ Ïñ¥Î†§Ïõ†Ïñ¥Ïöî."
              />
            </div>
            <div>
              <Label htmlFor="nextWeekGoal">Îã§Ïùå Ï£ºÏóê Îçî ÏûòÌïòÍ≥† Ïã∂ÏùÄ Í≤ÉÏùÄ Î¨¥ÏóáÏù∏Í∞ÄÏöî?</Label>
              <Textarea
                id="nextWeekGoal"
                value={reflection.nextWeekGoal}
                onChange={(e) => setReflection(prev => ({ ...prev, nextWeekGoal: e.target.value }))}
                placeholder="Ïòà: Îã§Ïùå Ï£ºÏóêÎäî Ï†ÄÎÖÅ Ï†ïÎ¶¨ ÏãúÍ∞ÑÏùÑ Îçî Ïûò ÏßÄÌÇ§Í≥† Ïã∂Ïñ¥Ïöî!"
              />
            </div>
          </CardContent>
        </Card>

        {/* Î≥¥ÏÉÅ ÏïÑÏù¥ÎîîÏñ¥ */}
        <Card className="bg-white/80 backdrop-blur-sm shadow-lg">
          <CardHeader>
            <CardTitle className="text-xl font-bold text-purple-800 flex items-center gap-2">
              <Trophy className="text-yellow-500" />
              Ïù¥Î≤à Ï£º Î≥¥ÏÉÅ ÏïÑÏù¥ÎîîÏñ¥
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div>
              <Label htmlFor="reward">Î™©Ìëú Îã¨ÏÑ± Ïãú Î∞õÏùÑ Î≥¥ÏÉÅÏùÑ Ï†ïÌï¥Î≥¥ÏÑ∏Ïöî!</Label>
              <Textarea
                id="reward"
                value={reward}
                onChange={(e) => setReward(e.target.value)}
                placeholder="Ïòà: ÏòÅÌôî Î≥¥Í∏∞, ÌäπÎ≥ÑÌïú Í∞ÑÏãù Î®πÍ∏∞, Î≥¥ÎìúÍ≤åÏûÑ ÏãúÍ∞Ñ, Í≥µÏõê Í∞ÄÍ∏∞ Îì±"
              />
            </div>
          </CardContent>
        </Card>

        {/* Ìë∏ÌÑ∞ */}
        <Card className="bg-white/80 backdrop-blur-sm shadow-lg">
          <CardContent className="pt-6">
            <div className="text-center space-y-2">
              <div className="text-lg font-semibold">
                ÏÑúÎ™Ö: _________________ (Î∂ÄÎ™®Îãò) &nbsp;&nbsp;&nbsp; _________________ ({childName || 'ÎÇò'}!)
              </div>
              <div className="text-sm text-gray-600 flex items-center justify-center gap-2">
                <Calendar className="w-4 h-4" />
                Îç∞Ïù¥ÌÑ∞Îäî ÏûêÎèôÏúºÎ°ú Ï†ÄÏû•Îê©ÎãàÎã§
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}

export default App

