name: Drift Detection

on:
  schedule:
    # Run every 6 hours (at 00:00, 06:00, 12:00, 18:00 UTC)
    - cron: '0 */6 * * *'

  workflow_dispatch:
    # Allow manual trigger from GitHub Actions UI

  push:
    paths:
      # Re-run when drift detection script or workflow changes
      - 'scripts/drift-detection.js'
      - '.github/workflows/drift-detection.yml'
    branches:
      - main

jobs:
  detect-drift:
    runs-on: ubuntu-latest

    permissions:
      # Required for creating issues
      issues: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run drift detection
        id: drift
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          echo "Running drift detection..."
          node scripts/drift-detection.js 2>&1 | tee drift-output.log

          # Capture exit code
          EXIT_CODE=${PIPESTATUS[0]}
          echo "exit_code=$EXIT_CODE" >> $GITHUB_OUTPUT

          # Always continue to next step (even if drift detected)
          exit 0
        continue-on-error: true

      - name: Upload drift detection logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: drift-detection-logs-${{ github.run_number }}
          path: drift-output.log
          retention-days: 30

      - name: Create issue on drift detection
        if: steps.drift.outputs.exit_code != '0'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const logContent = fs.readFileSync('drift-output.log', 'utf8');

            // Extract summary from logs
            const summaryMatch = logContent.match(/📊 Drift Detection Summary[\s\S]*?(?=\n\n|$)/);
            const summary = summaryMatch ? summaryMatch[0] : 'See logs for details';

            // Extract issues table
            const issuesMatch = logContent.match(/📋 Issue Details:[\s\S]*?(?=\n\n|$)/);
            const issuesTable = issuesMatch ? issuesMatch[0] : 'No issue details found';

            const issueBody = `## 🚨 Schema Drift Detected

            **Workflow Run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            **Timestamp**: ${new Date().toISOString()}
            **Triggered by**: ${context.eventName === 'schedule' ? 'Scheduled run (every 6 hours)' : 'Manual trigger or code push'}

            ### Summary

            \`\`\`
            ${summary}
            \`\`\`

            ### Issue Details

            \`\`\`
            ${issuesTable}
            \`\`\`

            ### Next Steps

            1. **Review the logs**: [Download drift detection logs](${context.payload.repository.html_url}/actions/runs/${context.runId})
            2. **Run locally for details**:
               \`\`\`bash
               node scripts/drift-detection.js
               \`\`\`
            3. **If legitimate drift** (new data in old schema):
               - Run backfill scripts to sync new data
               \`\`\`bash
               node scripts/backfill-children-weeks.js
               node scripts/backfill-habits-records.js
               node scripts/verify-backfill.js
               \`\`\`
            4. **If unexpected** (data corruption or bug):
               - Investigate root cause
               - Check recent changes to \`habit_tracker\` table
               - Verify data integrity with \`validate-constraints.js\`

            ### Known Acceptable Drifts

            - **6 weeks missing**: Weeks with non-Monday start dates (documented in backfill)
            - **Theme field**: Empty string (\`""\`) vs \`null\` (minor, no functional impact)

            ### Auto-Close Policy

            This issue will be automatically closed if:
            - Next scheduled drift detection run shows no drift (drift resolved)
            - Issue is marked as "known acceptable" with label \`drift:acceptable\`

            ---
            *This issue was automatically created by the drift detection workflow.*
            `;

            // Check if there's already an open drift detection issue
            const { data: existingIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'drift-detection',
              per_page: 1
            });

            if (existingIssues.length > 0) {
              // Update existing issue with new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssues[0].number,
                body: `### 🔄 Drift Still Detected (Run #${{ github.run_number }})\n\n${issueBody}`
              });

              console.log(`Updated existing issue #${existingIssues[0].number}`);
            } else {
              // Create new issue
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 Schema Drift Detected (Run #${{ github.run_number }})`,
                body: issueBody,
                labels: ['bug', 'drift-detection', 'high-priority', 'phase-0']
              });

              console.log(`Created new issue #${newIssue.number}`);
            }

      - name: Comment on PR if applicable
        if: github.event_name == 'push' && steps.drift.outputs.exit_code != '0'
        uses: actions/github-script@v7
        with:
          script: |
            // If this was triggered by a push, comment on related PR
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            });

            if (prs.length > 0) {
              for (const pr of prs) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: `⚠️ **Drift Detection Warning**\n\nThis PR may have introduced schema drift. Please check the [drift detection run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`
                });
              }
            }

      - name: Success notification
        if: steps.drift.outputs.exit_code == '0'
        run: |
          echo "✅ No drift detected - schemas are in sync!"
          echo "Old and new schemas are consistent."

  # Auto-close resolved drift issues
  auto-close-resolved:
    runs-on: ubuntu-latest
    needs: detect-drift
    if: needs.detect-drift.outputs.exit_code == '0'

    permissions:
      issues: write
      contents: read

    steps:
      - name: Close resolved drift issues
        uses: actions/github-script@v7
        with:
          script: |
            // Find open drift detection issues
            const { data: openIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'drift-detection'
            });

            for (const issue of openIssues) {
              // Check if issue has "drift:acceptable" label
              const hasAcceptableLabel = issue.labels.some(l => l.name === 'drift:acceptable');

              if (!hasAcceptableLabel) {
                // Close the issue with a comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  body: `✅ **Drift Resolved**\n\nThe latest drift detection run (Run #${{ github.run_number }}) shows no drift. Closing this issue automatically.\n\nIf drift reoccurs, a new issue will be created.`
                });

                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  state: 'closed',
                  labels: [...issue.labels.map(l => l.name), 'resolved']
                });

                console.log(`Closed resolved drift issue #${issue.number}`);
              }
            }
